library(utilitR)
x$recipe$last_term_infoa
utilitR::t_outlier_test(recipe, data = mtcars, method = methods)
x$recipe$last_term_info %>%
dplyr::filter(role == "outcome") %>%
dplyr::pull(variable) %>%
`[[`(x$trainingData, .)
?utilitR::t_outlier_test
?utilitR::t_outlier_test
?utilitR::t_outlier_test
library(utilitR)
library(utilitR)
?utilitR::GH_outlier
library(utilitR)
?utilitR::GH_outlier
GH_outlier(mtcars, remove = F)
trees
GH_outlier(trees, remove = F)
?regex
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^*+Outliers: [[:digit:]]*")
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^\*+Outliers: [[:digit:]]*")
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^\*+")
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^\*+",
perl = T)
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^\*+",
perl = T)
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^*+",
perl = T)
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^",
perl = T)
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^\\*",
perl = T)
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^\\*")
GH_outlier(trees, remove = F)
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^\\*+")
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^\\*+Outlier")
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^\\*+ Outlier")
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^\\*+\nOutlier")
GH_outlier(trees, remove = F)
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^\\*+\nOutlier: [[:digit:]]+")
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^\\*+\nOutlier:[[:blank:]]{1}[[:digit:]]+")
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^\\*+\nOutlier\\:[[:blank:]]{1}[[:digit:]]+")
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^\\*+\nOutlier:")
GH_outlier(trees, remove = F)
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^\\*+\nOutliers:")
testthat::expect_output(GH_outlier(trees, remove = F),
regexp = "^\\*+\nOutliers:[[:blank:]]{1}[[:digit:]]+")
library(utilitR)
library(utilitR)
class(dplyr::everything())
lower <- 1
upper <- 1
lower == upper
? lower == upper : 0
ifelse(lower == upper, 0)
ifelse(lower == upper, 0, lower)
lower <- ifelse(lower == upper, 0, lower)
lower
lower <- 55
lower <- ifelse(lower == upper, 0, lower)
lower
mtcars
library(MASS)
data("Animals")
Animals
mammals
aids
Aids2
Melanoma
arrest
Arrest
Arrests
library(carData)
Arrests
Arrests
Arrests$year
table(Arrests$year)
data = Arrests
bound = c(0.10, 0.20)
group <- year
group <- "year"
lower <- min(bound)
upper <- max(bound)
lower <- ifelse(lower == upper, 0, lower)
lower
upper
data_prop <- data %>%
dplyr::count(!!!dplyr::syms(group)) %>%
dplyr::mutate(prop = n/sum(n))
library(purrr)
data_prop <- data %>%
dplyr::count(!!!dplyr::syms(group)) %>%
dplyr::mutate(prop = n/sum(n))
data_prop
groupset_combination_lst <- seq_along(data_prop[[group]]) %>%
purrr::map(combn, x = data_prop[[group]], simplify = F) %>%
purrr::reduce(c)
groupset_combination_lst
groupset_combination_lst <- seq_along(data_prop[[group]]) %>%
purrr::map(combn, x = data_prop[[group]], simplify = F) %>%
purrr::reduce(c)
?caret::groupKFold
groups <- sort(sample(letters[1:4], size = 20, replace = TRUE))
table(groups)
folds <- groupKFold(groups)
groups
caret::groupKFold(groups)
length(unique(groups))
caret::groupKFold(groups, 2)
caret::groupKFold(groups, 1)
caret::groupKFold(groups, 3)
caret::groupKFold(groups, 4)
caret::groupKFold(groups, 6)
sub_data_lst
groupset_combination_lst
groupset_combination_lst
?sample
sample(1:10, 5)
sample(1:10, 10)
sample(1:10, 11)
n = 10
seq_along(data_prop[[group]]) %>%
purrr::map(combn, x = data_prop[[group]], simplify = F) %>%
purrr::reduce(c) %>%
sample(n)
data
data[, group]
unique(data[, group])
seq_along(data_prop[[group]]) %>%
purrr::map(combn, x = data_prop[[group]], simplify = F) %>%
purrr::reduce(c) %>%
sample(n)
groupset_combination_lst <- seq_along(data_prop[[group]]) %>%
purrr::map(combn, x = data_prop[[group]], simplify = F) %>%
purrr::reduce(c)
length(groupset_combination_lst)
group_max_length <- length(groupset_combination_lst)
n <- ifelse(n > group_max_length | 0, group_max_length, n)
n
library(utilitR)
data_prop <- data %>%
dplyr::count(!!!dplyr::syms(group)) %>%
dplyr::mutate(prop = n/sum(n))
groupset_combination_lst <- seq_along(data_prop[[group]]) %>%
purrr::map(combn, x = data_prop[[group]], simplify = F) %>%
purrr::reduce(c)
group_max_length <- length(groupset_combination_lst)
n <- ifelse(n > group_max_length | 0, group_max_length, n)
set.seed(random_state)
groupset_combination_fnl_lst <- groupset_combination_lst %>%
sample(n)
random_state <- 1010
set.seed(random_state)
groupset_combination_fnl_lst <- groupset_combination_lst %>%
sample(n)
groupset_combination_fnl_lst
sub_data_lst <- groupset_combination_fnl_lst %>%
purrr::map(~dplyr::filter(data_prop, data_prop[[group]] %in% .x))
sub_data_lst
library(utilitR)
groupset_combination_lst <- seq_along(data_prop[[group]]) %>%
purrr::map(combn, x = data_prop[[group]], simplify = F) %>%
purrr::reduce(c)
groupset_combination_lst
?utilitR::t_outlier_test
list(a = "a", b = "b")
l <- list(a = "a", b = "b")
l
c(l, "toto")
c(l, trControl = list(fuch = "f"))
caret::groupKFold(1, 1, 1, 2, 2, 4, 4, 4, 3, 3)
caret::groupKFold(c(1, 1, 1, 2, 2, 4, 4, 4, 3, 3))
caret::groupKFold(c(1, 1, 1, 2, 2, 4, 4, 4, 3, 3), 2)
caret::groupKFold(c(1, 1, 1, 2, 2, 4, 4, 4, 3, 3), 2)
caret::groupKFold(c(1, 1, 1, 2, 2, 4, 4, 4, 3, 3), 2)
caret::groupKFold(c(1, 1, 1, 2, 2, 4, 4, 4, 3, 3), 2)
caret::groupKFold(c(1, 1, 1, 2, 2, 4, 4, 4, 3, 3), 2)
caret::groupKFold(c(1, 1, 1, 2, 2, 4, 4, 4, 3, 3), 2)
caret::groupKFold(c(1, 1, 1, 2, 2, 4, 4, 4, 3, 3), 2)
caret::groupKFold(c(1, 1, 1, 2, 2, 4, 4, 4, 3, 3), 2)
caret::groupKFold(c(1, 1, 1, 2, 2, 4, 4, 4, 3, 3), 2)
caret::groupKFold(c(1, 1, 1, 2, 2, 4, 4, 4, 3, 3), 2)
caret::groupKFold(c(1, 1, 1, 2, 2, 4, 4, 4, 3, 3), 2)
caret::groupKFold(c(1, 1, 1, 2, 2, 4, 4, 4, 3, 3), 2)
caret::groupKFold(c(1, 1, 1, 2, 2, 4, 4, 4, 3, 3), 2)
caret::groupKFold(c(1, 1, 1, 2, 2, 4, 4, 4, 3, 3), 2)
caret::groupKFold(c(1, 1, 1, 2, 2, 4, 4, 4, 3, 3), 2)
caret::groupKFold(c(1, 1, 1, 2, 2, 4, 4, 4, 3, 3), 2)
caret::groupKFold(c(1, 1, 1, 2, 2, 4, 4, 4, 3, 3), 2)
?caret::groupKFold
library(utilitR)
library(utilitR)
foo <- function(a){message(missing(a))}
foo(a = 1)
foo(a)
foo <- function(a){function(b){message(missing(a))}()}
foo()
foo()()
foo <- function(a){function(b){message(missing(a))}}
foo()()
foo <- function(a){function(a, b){message(missing(a))}}
foo()
foo()()
foo(4)()
foo <- function(a){function(a = a, b){message(missing(a))}}
foo()()
foo(3)()
foo(a = 3)()
foo(3)(3)
foo(a = 3)
foo(a = 3)()
foo <- function(a){ (function(a = a, b){message(missing(a))})() }
foo
foo()
foo(1)
foo(14)
is_empty(a)
a
gg
is_empty(gg)
foo <- function(x){x}
foo()
foo <- function(x){is_empty(x)}
foo()
group <- "toto"
logical(group)
as.logical(group)
group
is_empty(group)
group <- FALSE
is_empty(group)
group <- NULL
is_empty(group)
purrr::is_empty(NULL)
library(utilitR)
library(utilitR)
library(utilitR)
?dplyr::everything
library(utilitR)
library(utilitR)
library(utilitR)
library(utilitR)
is.numeric(NULL)
c(1:10, 1:5)
c(1:10, 1:5) %>% unique
c(1:10, 1:5) %>% unique %>% length
k <- 7
logical(is.numeric(k))
logical(is.numeric(k))
as.logical(is.numeric(k))
as.logical(is.numeric(k) & c(T, T))
as.logical(is.numeric(k) && c(T, T))
as.logical(is.numeric(k) && k < 10)
as.logical(is.numeric(k) & k < 10)
as.logical(is.numeric(k) && k < 10)
k <- "toto"
as.logical(is.numeric(k) && k < 10)
library(utilitR)
library(utilitR)
foo <- function(a = 5){match.call()}
foo()
foo <- function(a = 5){message(match.call())}
foo()
foo <- function(a = 5){message(match.call()[-1])}
foo()
foo <- function(a = 5, b = 10){message(match.call()[-1])}
foo()
foo <- function(a = 5, b = 10){as.list(match.call()[-1])}
foo()
?match.call
foo <- function(a = 5, b = 10){as.list(match.call())}
foo()
foo <- function(a = 5, b = 10){as.list(match.call()[-1])}
foo()
foo <- function(a, b){as.list(match.call()[-1])}
foo()
foo(1, 2)
foo(1)
foo <- function(a = 5, b = 6){as.list(match.call())}
foo()
foo(1)
foo <- function(a = 5, b = 6){mget(names(formals()), sys.frame(sys.nframe()))}
foo()
?mget
?sys.frame
library(utilitR)
library(utilitR)
?UseMethod
?mget
?formals
formals()
?grep
c("x", "data", "method", "...")
arguments <- c("x", "data", "method", "...")
arguments
grep(arguments, "...")
grepl(arguments, "...")
grep(arguments, "\.\.\.")
grep(arguments, "\\.\\.\\.")
?
90()
?regex
grep(arguments, "[^[:punct:]]{3}$")
grep(arguments, "[^[:punct:]]{3}$", perl = T)
arguments
grep("[^[:punct:]]{3}$", arguments)
grepl("[^[:punct:]]{3}$", arguments)
grepl("^[[:punct:]]{3}$", arguments)
grepl("^(?![[:punct:]]{3})$", arguments)
grepl("^(?![[:punct:]]{3})$", arguments, perl = T)
grepl("(?!^[[:punct:]]{3}$)", arguments, perl = T)
grepl("^[^[:punct:]]{3}$", arguments, perl = T)
grepl("^[[:punct:]]{3}$", arguments, perl = T)
!grepl("^[[:punct:]]{3}$", arguments, perl = T)
!grepl("^(?!...)$", arguments, perl = T)
!grepl("^(...)$", arguments, perl = T)
grepl("^(...)$", arguments, perl = T)
grepl("^(?!...)$", arguments, perl = T)
grepl("(?!...)", arguments, perl = T)
grepl("(...)", arguments, perl = T)
grepl("^(...)", arguments, perl = T)
grepl("(...)", arguments, perl = T)
arguments
grepl("[...]", arguments, perl = T)
grepl("[[...]]", arguments, perl = T)
grepl("[[...]]", arguments)
grepl("[...]", arguments)
grepl("^[...]$", arguments)
grepl("^[.]{3}$", arguments)
grep("^[.]{3}$", arguments)
grepl("^(?![.]{3})$", arguments)
grepl("^(?![.]{3})$", arguments, perl = T)
grepl("(?![.]{3})", arguments, perl = T)
grepl("(?!^[.]{3})", arguments, perl = T)
grepl("(?!^[.]{3}$)", arguments, perl = T)
foo <- function(...){is.null(list(...))}
foo()
foo <- function(...){is_empty(list(...))}
foo()
library(purrr)
foo()
foo("a")
library(utilitR)
library(utilitR)
library(utilitR)
library(utilitR)
?caret::trainControl
library(utilitR)
library(utilitR)
library(utilitR)
library(utilitR)
library(utilitR)
library(utilitR)
rm(list = ls())
library(utilitR)
library(utilitR)
list(1:3)
a <- list(1:3, 5:9)
a
names(a)
bool(names(a))
boolean(names(a))
hasName(a)
names(a)
is.null(names(a))
a <- list(1:3, a = 5:9)
is.null(names(a))
names(a)
stringr::str_count(a, '')
stringr::str_count(a, '^$')
stringr::str_length(a)
stringr::str_length(names(a))
stringr::str_length(names(a)) == 0
any(stringr::str_length(names(a)) == 0)
length(a)
2/10
2%10
log10(8)
ceiling(log10(8))
ceiling(log10(80))
ceiling(log10(800))
any(stringr::str_length(names(a)) == 0)
a
a <- list(1:3, a = 5:9, 4:9)
a
names(a)
names(a) %>% stringr::str_replace("^$", 1:2)
library(purrr)
names(a) %>% stringr::str_replace("^$", 1:2)
names(a) %>% stringr::str_replace("^$", c('e', 'r'))
is_empty('')
is_empty('d')
df <- data.frame(a)
df <- caret::LPH07_1()
df
master <- caret::LPH07_1()
slave_dfs <- list(caret::LPH07_1(), caret::LPH07_1())
slave_dfs
dfs
master
slave_dfs
if(is.null(names(slave_dfs))){
names <- paste0("sl",
stringr::str_pad(1:length(slave_dfs),
width = ceiling(log10(slave_dfs)),
pad = '0'))
}
if(is.null(names(slave_dfs))){
names <- paste0("sl",
stringr::str_pad(1:length(slave_dfs),
width = ceiling(log10(length(slave_dfs))),
pad = '0'))
}
slave_dfs
names(slave_dfs)
if(is.null(names(slave_dfs))){
names(slave_dfs) <- paste0(
"sl",
stringr::str_pad(1:length(slave_dfs),
width = ceiling(log10(length(slave_dfs))),
pad = '0')
)
}
names(slave_dfs)
dfs <- list(master, slave_dfs)
dfe
dfs
dfs <- c(master, slave_dfs)
dfs
dfs <- c(list(master), slave_dfs)
dfs
dfs <- c(list(master), list(slave_dfs))
dfs
dfs <- list(master, slave_dfs)
dfs %>% purrr::flatten()
dfs
d <- function(...){}
d <- function(...){}
d <- function(...){
list(...)
}
master
d(master)
c(list(master), slave_dfs)
column <- names(master)
column
dfs_lst <- c(list(master), slave_dfs) %>%
purrr::map(dplyr::select, column) %>% setNames(nm=c('master',
names(slave_dfs)))
dfs_lst$master
dfs_lst$sl1
dfs_lst$sl2
master_preproc <- dfs_lst$master %>%
caret::preProcess(method = c("center", "scale", "nzv", "pca"))
master_preproc
dfs_lst
dfs_pca_lst <- dfs_lst %>%
purrr::map(predict, object = master_preproc)
dfs_pca_lst
dfs_pca_lst[-1]
cov(dfs_pca_lst[-1])
cov(dfs_pca_lst$master)/2
dfs_pca_lst[-1] %>% purrr::map(cov) /2
dfs_pca_lst[-1] %>% purrr::map(cov)
dfs_pca_lst[-1] %>% purrr::map(~cov(.x) / 2)
0.571903528 * 2
master_c.5 <- cov(dfs_pca_lst$master) / 2
covariance_lst <- dfs_pca_lst[-1] %>%
purrr::map(function(x){
cov(x) / 2 + master_c.5
})
covariance_lst
pc_test_mahalanobis_lst <- dfs_pca_lst[-1] %>%
purrr::map(mahalanobis, center = colMeans(master_pca), cov = covariance)
pc_test_mahalanobis_lst <- dfs_pca_lst[-1] %>%
purrr::map(mahalanobis,
center = colMeans(dfs_pca_lst$master),
cov = covariance)
pc_test_mahalanobis_lst <- dfs_pca_lst[-1] %>%
purrr::map2(covariance_lst, mahalanobis,
center = colMeans(dfs_pca_lst$master))
pc_test_mahalanobis_lst
pc_test_mahalanobis_lst
pc_test_mahalanobis_lst / list(2, 2)
pc_test_mahalanobis_lst / c(2, 2)
purrr::map2(pc_test_mahalanobis_lst,
purrr::map(dfs_pca_lst[-1], ncol),
~.x / .y)
purrr::map2(pc_test_mahalanobis_lst,
purrr::map(dfs_pca_lst[-1], ncol),
~.x / .y)
library(utilitR)
library(utilitR)
library(utilitR)
